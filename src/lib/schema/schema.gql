### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The address object used for both the client and sender's address information. It contains the person's street, city, post code and country data
"""
type Address {
  """The city where the person lives in"""
  city: String!

  """The country where the person is located"""
  country: String!

  """The post code of the person's state"""
  postCode: String!

  """The street where the person resides"""
  street: String!
}

input AddressInput {
  """The city where the person lives in"""
  city: String!

  """The country where the person is located"""
  country: String!

  """The post code of the person's state"""
  postCode: String!

  """The street where the person resides"""
  street: String!
}

type AuthPayload {
  accessToken: String!
  user: User!
}

input CreateInvoiceInput {
  clientAddress: AddressInput!
  clientEmail: String!
  clientName: String!
  description: String!
  items: [InvoiceItemInput!]!
  paymentDue: String!
  paymentTerms: Int!
  senderAddress: AddressInput!
  status: String!
  tag: String!
  total: Float!
  userId: ID
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The object containing metadata about the invoice e.g. items purchased, when the payment is due, client address information, the current status, et cetera
"""
type Invoice {
  """The address of the person receiving the invoice"""
  clientAddress: Address

  """The email of the person receiving the invoice"""
  clientEmail: String

  """The name of the person receiving the invoice"""
  clientName: String

  """The exact time the invoice was created"""
  createdAt: DateTime

  """A high level description of the items listed in the invoice"""
  description: String

  """The GUID for the Invoice"""
  id: ID

  """The items listed in the invoice"""
  items: [InvoiceItem!]!

  """When the payment of the items listed in the invoice is due"""
  paymentDue: String

  """
  The number of days before an invoice's payment grace period expires. Can be 1, 7, 14 or 30 days
  """
  paymentTerms: Int

  """The address of the person sending the invoice"""
  senderAddress: Address

  """The current status of the invoice"""
  status: String

  """Unique id sequence used to tag the invoice"""
  tag: String

  """The grand total of the price of the items listed in the invoice"""
  total: Float

  """The exact time the invoice was updated"""
  updatedAt: DateTime

  """The GUID of the invoice's issuer"""
  userId: ID
}

"""An item listed in the invoice"""
type InvoiceItem {
  """The id of this item"""
  id: ID

  """The name of this item"""
  name: String

  """The price of this item"""
  price: Float

  """The amount of this item purchased"""
  quantity: Int

  """
  The price of this item multiplied by the total number of this item purchased
  """
  total: Float
}

input InvoiceItemInput {
  id: ID!
  name: String!
  price: Float!
  quantity: Int!
  total: Float!
}

input LoginInput {
  """The email of the user"""
  email: String!

  """The password of the user"""
  password: String!
}

type LogoutPayload {
  message: String!
}

type Mutation {
  createInvoice(input: CreateInvoiceInput!): Invoice
  deleteInvoice(where: UniqueIdInput!): Invoice
  login(input: LoginInput!): AuthPayload
  logout: LogoutPayload!
  register(input: RegisterInput!): AuthPayload
  updateInvoice(input: UpdateInvoiceInput!, where: UniqueIdInput!): Invoice
}

type Query {
  invoice(where: UniqueIdInput!): Invoice
  invoices: [Invoice]!
  refreshAuth: RefreshPayload
  user: User
}

type RefreshPayload {
  accessToken: String!
}

input RegisterInput {
  """The email of the user"""
  email: String!

  """
  The password of the user. Must match the countersign i.e the reentered password
  """
  password: String!

  """The image url generated from the user's email address"""
  photo: String
}

"""The current role of the user"""
enum Role {
  ADMIN
  USER
}

input UniqueIdInput {
  id: ID!
}

input UniqueIdWithUserId {
  id: ID!
  userId: ID!
}

input UniqueUserId {
  userId: ID!
}

input UpdateInvoiceInput {
  clientAddress: AddressInput!
  clientEmail: String!
  clientName: String!
  description: String!
  items: [InvoiceItemInput!]!
  paymentDue: String!
  paymentTerms: Int!
  senderAddress: AddressInput!
  status: String!
  total: Float!
}

type User {
  """The exact time the user was created"""
  createdAt: DateTime!

  """The email of the user"""
  email: String!

  """The GUID for the User"""
  id: ID!

  """The password of the user"""
  password: String

  """The avatar of the user"""
  photo: String

  """The exact time the user was updated"""
  updatedAt: DateTime
}